Loops
Lab Overview
A loop is a segment of code that repeats. You will be introduced to two types of loops: the while loop and the for loop.

In this lab, you will:

Use a while loop
Use a for loop
Estimated Completion Time
45 minutes

Exercise 1: The while Loop
A while loop makes a section of code repeat and repeat until a certain condition is met. In this exercise, you will create a Python script that asks the user to correctly guess a number.

Print Game Rules
Click on the work folder in the file tree

Click on the file while_loop.py that has been created for you

Use the print() function to inform the user about your game:

print("Welcome to Guess The Number!")
print("The rules are simple. I will think of a number and you try to guess it.")
Save the file.

To run the program, type the following at the terminal:

python3.6 while_loop.py
Verify that the script runs correctly and that the output displays as you expect it to.

Import random and Write while Loop
You will be using the import command to include code that someone else wrote. Up until now, we have been using built-in functions. Remember, a function is a piece of reusable code. Let’s return to the Python script:

At the top of the file, include the following Python module (which is a type of library) called random. Note, by convention, import statements are placed at the top of the script:

import random
Return the cursor to the next line after the print() statement. You will use the randint() function of the random module to generate a random number between 1 and 10:

number = random.randint(1,10)
You will use a variable called isGuessRight to keep track of whether the user has guessed your number:

isGuessRight = False
The while loop will repeat the code inside the loop until the number is guessed right, which is represented by the condition isGuessRight != True in the following code. Addittonally, Python uses indentation to determine logic blocks, or what statements are considered to be part of the while loop. Indentation is done by pressing tab next to a statement:

while isGuessRight != True:
  guess = input("Guess a number between 1 and 10: ")
  if int(guess) == number:
    print("You guessed {}. That is right! You win!".format(guess))
    isGuessRight = True
  else:
    print("You guessed {}. Sorry, that isn’t it. Try again.".format(guess))
Save the file.

Write Pseudo Code
Before you run the Python script, try to write out the logic of the while loop in English sentences. This technique is called pseudo coding.

If the user has not guessed the right answer, enter the loop.
Ask the user for a guess.
Is the guess the right number?
If the right guess, tell the user it was the right guess and exit the loop.
If the wrong guess, tell the user it was the wrong guess and continue the loop.
Run the Script
Now try to run the Python script and see if it works.

To run the program, type the following at the terminal:

python3.6 while_loop.py
Verify that the script runs correctly and that the output displays as you expect it to.

Add Comments
It is helpful to write comments in the code. A comment line is ignored by Python. It starts with the # symbol. This symbol is generated by holding down SHIFT + Number 3 on most keyboards. Add your own comments to the code to help you remember what the code is doing.

Exercise 1 Solution
A sample solution file for this lab has been created for you:

while_loop_solution.py
Check your work by comparing your lab 1 script to the sample solution.

Exercise 2: The for loop
You can tell a for loop exactly when to stop. In exercise 1, you didn’t know when the while loop would stop. If the user never guesses the right answer, it could go on forever. In this exercise, you will write a for loop to count to 10.

Inform User about Script
In this activity, you will start a new Python script by creating the initial output that informs the user about what the script will do.

In the file tree click on work folder if it is not open

Click on the file for_loop.py that has been created for you

Use the print() function to inform the user about your script:

print("Let’s count to 10!")
Save the file.

To run the program, type the following at the terminal:

python3.6 for_loop.py
Verify that the script runs correctly and that the output displays as you expect it to.

Write the for Loop
Python allows you to pack a lot into a few words. This makes Python easy to type, but can make it tricky to read. In this activity, you will use the for statement, but spend some time breaking it down after you see it in action. Let’s return to the Python script:

Type the following to count to 10 (Note, indentation is used by Python to determine the print statement is inside the for loop statement.):

for x in range (0, 11):
  print(x)
Save the file.

To run the program, type the following at the terminal:

python3.6 for_loop.py
Verify that the script runs correctly and that the output displays as you expect it to.

Now let’s try to explain what happened in those two lines. The for statement uses the "for … in" keywords to tell the computer to go through the list. A list is being generated by the range() function. The range function takes a starting number and an ending number, but the ending number is not inclusive. So you pass in 11 to have it stop counting at 10. The letter x is acting as a variable. Each time through the loop, the variable x is assigned to the next variable in the loop and is being printed out to the screen.

Congratulations, you are now familiar with while and for loops in Python.

Exercise 2 Solution
A sample solution file for this lab is available in the work directory:

for_loop_solution.py
Check your work by comparing your lab 1 script to the sample solution.

STOP
You have successfully completed this lab.